PROBLEMS:
1. How does this scale? Probably badly with current implementation

IDEAS:
* Parallel sampling?
    Should be fine, take s to {s1, s2, .., sN}, N being the batch size
    V Implemented


TODO:
- Precondition s, at least when simulating the physical system.
- Convegence Experiments:
    1. Look at time for convergence for various Gaussian distr.s
    2. Look at effects of stepsizes

- Make DSC work
V Get trainer to work in torch and restart from saved points
- Have soln output and be able to piece together solns

- Make variable tau, etc.
    V Using torch..
        - rewrite loader in torch
    v For each param, define mass, tau as a attribute
- Output loss, etc.
V Save model after training in dir
- Visualize 1D data
- Do parameter search
V Add momentum term
V Specify which times to save
V Make solutions class
- Figure out time scale and correspondance w/ step size
V Visualize X, R, A, S in same screen
V debug HVLines
    - Make visualizer work
V Save reconstr and image shape during save_soln function call
V Make loader construct batches from bases
V Make loader module
V Shuffled X by batch
V Mercedes set
V L0 norm
V Start tspan at 0
V Implement parallel sampling
    V make loader
    V write solver
    V update plotter

- Make all variables learnable:
    v A
    - x
    v s
    - l1
    - l0
V Make code faster
V Discrete SC
- LCA

QUESTIONS:

1. Why is A.T @ A sparse?
2. What are conditions of convergence for Langevin equations
3. What is the non-eq distribution for T < infty? Could we use that?
    - For uniform potential, the distribution of final position should be guassian with variance = t.
        -Probably no good for T << T_eq, the trajectory is highly correlated (maybe?)
4. What is the correspondance, if there is any, between MTSC and DSC in terms of time scale and step size, etc.
